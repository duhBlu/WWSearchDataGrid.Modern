<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:behaviors="clr-namespace:WWSearchDataGrid.Modern.WPF.Behaviors;assembly=WWSearchDataGrid.Modern.WPF"
                    xmlns:converters="clr-namespace:WWSearchDataGrid.Modern.WPF.Converters;assembly=WWSearchDataGrid.Modern.WPF"
                    xmlns:sdg="clr-namespace:WWSearchDataGrid.Modern.WPF;assembly=WWSearchDataGrid.Modern.WPF">

    <!--  Converters  -->
    <converters:StringEqualityConverter x:Key="StringEqualityConverter" />
    <converters:BooleanToVisibilityCollapsedConverter x:Key="BooleanToVisibilityCollapsedConverter" />
    <converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
    <converters:GreaterThanConverter x:Key="GreaterThanConverter" />

    <!--#region Filter Tokens-->

    <!--  Open Bracket Token Template  -->
    <DataTemplate x:Key="OpenBracketTokenTemplate">
        <Border Background="Transparent"
                BorderThickness="1"
                Margin="0,0,-8,0"
                Width="10"
                Height="26"
                behaviors:TokenHoverBehavior.IsEnabled="True"
                Tag="{Binding FilterId}">
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="#9a9a9a" Offset="0" />
                    <GradientStop Color="#9a9a9a" Offset="0.5" />
                    <GradientStop Color="Transparent" Offset="0.51" />
                    <GradientStop Color="Transparent" Offset="1" />
                </LinearGradientBrush>
            </Border.BorderBrush>
        </Border>
    </DataTemplate>

    <!--  Column Name Token Template  -->
    <DataTemplate x:Key="ColumnNameTokenTemplate">
        <Border Background="#ffc69b"
                Margin="1,3"
                Padding="6,3"
                Height="24"
                behaviors:TokenHoverBehavior.IsEnabled="True"
                CornerRadius="6"
                Tag="{Binding FilterId}">
            <TextBlock Foreground="Black"
                       Text="{Binding DisplayText}"
                       VerticalAlignment="Center"
                       FontWeight="SemiBold" />
        </Border>
    </DataTemplate>

    <!--  Search Type Token Template  -->
    <DataTemplate x:Key="SearchTypeTokenTemplate">
        <Border Background="Transparent"
                Margin="2,1"
                Padding="4,3"
                Height="24"
                behaviors:TokenHoverBehavior.IsEnabled="True"
                Tag="{Binding FilterId}">
            <TextBlock Foreground="#666"
                       Text="{Binding DisplayText}"
                       VerticalAlignment="Center"
                       FontSize="12" />
        </Border>
    </DataTemplate>

    <!--  Unary Search Type Token Template  -->
    <DataTemplate x:Key="UnarySearchTypeTokenTemplate">
        <Grid x:Name="TokenRoot"
              Cursor="Hand"
              Height="24"
              behaviors:TokenHoverBehavior.IsEnabled="True"
              behaviors:TokenConfirmationBehavior.IsEnabled="True"
              Tag="{Binding FilterId}">
            <Border x:Name="TokenBorder"
                    Background="#bbe2c5"
                    Margin="1"
                    Padding="8,4"
                    CornerRadius="6">
                <TextBlock Foreground="Black"
                           Text="{Binding DisplayText}"
                           VerticalAlignment="Center" />
            </Border>

            <!--  Confirmation overlay  -->
            <Button BorderThickness="0"
                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=(behaviors:TokenConfirmationBehavior.IsInConfirmationState), Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                    Cursor="Hand"
                    Command="{Binding RemoveValueFromTokenCommand, RelativeSource={RelativeSource AncestorType=sdg:FilterPanel}}"
                    CommandParameter="{Binding}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    FontFamily="Segoe Fluent Icons"
                    FontSize="12"
                    Content="&#xF78A;"
                    Tag="{Binding FilterId}">
                <Button.ToolTip>
                    <ToolTip>
                        <ToolTip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock VerticalAlignment="Center">
                                    <Run Text="Remove '" />
                                    <Run Text="{Binding DisplayText}" />
                                    <Run Text="' Search Template" />
                                </TextBlock>
                            </DataTemplate>
                        </ToolTip.ContentTemplate>
                    </ToolTip>
                </Button.ToolTip>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Background" Value="#61000000" />
                        <Setter Property="Foreground" Value="#FFFFFFFF" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="6">
                                        <ContentPresenter x:Name="contentPresenter"
                                                          Focusable="False"
                                                          Margin="{TemplateBinding Padding}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          RecognizesAccessKey="True"
                                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#7A000000" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Background" Value="#8F000000" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
    </DataTemplate>

    <!--  Value Token Template  -->
    <DataTemplate x:Key="ValueTokenTemplate">
        <Grid x:Name="TokenRoot"
              Background="Transparent"
              Cursor="Hand"
              Height="24"
              behaviors:TokenHoverBehavior.IsEnabled="True"
              behaviors:TokenConfirmationBehavior.IsEnabled="True"
              Tag="{Binding FilterId}">
            <Border Background="#bbe2c5"
                    Margin="1"
                    Padding="8,4"
                    CornerRadius="6">
                <TextBlock Foreground="Black"
                           Text="{Binding DisplayText}"
                           VerticalAlignment="Center" />
            </Border>

            <!--  Confirmation overlay  -->
            <Button BorderThickness="0"
                    Visibility="{Binding RelativeSource={RelativeSource AncestorType=Grid}, Path=(behaviors:TokenConfirmationBehavior.IsInConfirmationState), Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                    Cursor="Hand"
                    Command="{Binding RemoveValueFromTokenCommand, RelativeSource={RelativeSource AncestorType=sdg:FilterPanel}}"
                    CommandParameter="{Binding}"
                    Margin="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    FontFamily="Segoe Fluent Icons"
                    FontSize="12"
                    Content="&#xF78A;"
                    Tag="{Binding FilterId}">
                <Button.ToolTip>
                    <ToolTip>
                        <ToolTip.ContentTemplate>
                            <DataTemplate>
                                <TextBlock VerticalAlignment="Center">
                                    <Run Text="Remove '" />
                                    <Run Text="{Binding DisplayText}" />
                                    <Run Text="' Search Template" />
                                </TextBlock>
                            </DataTemplate>
                        </ToolTip.ContentTemplate>
                    </ToolTip>
                </Button.ToolTip>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="Background" Value="#61000000" />
                        <Setter Property="BorderBrush" Value="#DC3656" />
                        <Setter Property="Foreground" Value="#FFFFFFFF" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Border x:Name="border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="6">
                                        <ContentPresenter x:Name="contentPresenter"
                                                          Focusable="False"
                                                          Margin="{TemplateBinding Padding}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          RecognizesAccessKey="True"
                                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#7A000000" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter Property="Background" Value="#8F000000" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
        </Grid>
    </DataTemplate>

    <!--  Value Operator Token Template (between values "and")  -->
    <DataTemplate x:Key="ValueOperatorTokenTemplate">
        <Border Background="Transparent"
            Margin="1,1"
            Padding="3,3"
            Height="24"
            behaviors:TokenHoverBehavior.IsEnabled="True"
            Tag="{Binding FilterId}">
            <TextBlock Foreground="#888"
                   Text="{Binding DisplayText}"
                   VerticalAlignment="Center"
                   FontSize="11" />
        </Border>
    </DataTemplate>
    
    <!--  Closing Bracket Token Template  -->
    <DataTemplate x:Key="ClosingBracketTokenTemplate">
        <Border Background="Transparent"
            BorderThickness="1"
            Margin="-8,0,0,0"
            Width="10"
            Height="26"
            behaviors:TokenHoverBehavior.IsEnabled="True"
            Tag="{Binding FilterId}">
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                    <GradientStop Color="#9a9a9a" Offset="0" />
                    <GradientStop Color="#9a9a9a" Offset="0.5" />
                    <GradientStop Color="Transparent" Offset="0.51" />
                    <GradientStop Color="Transparent" Offset="1" />
                </LinearGradientBrush>
            </Border.BorderBrush>
        </Border>
    </DataTemplate>

    <!--  Search Template Group logical Connector Token Template  -->
    <DataTemplate x:Key="GroupLogicalConnectorTokenTemplate">
        <Border x:Name="OperatorBorder"
            Background="#cee8fb"
            Cursor="Hand"
            Margin="4,1,14,0"
            Padding="8,3"
            Height="24"
            behaviors:TokenHoverBehavior.IsEnabled="True"
            CornerRadius="6"
            ToolTip="Click to toggle between AND/OR"
            Tag="{Binding FilterId}">
            <Border.InputBindings>
                <MouseBinding Command="{Binding ToggleOperatorCommand, RelativeSource={RelativeSource AncestorType=sdg:FilterPanel}}"
                          CommandParameter="{Binding}"
                          MouseAction="LeftClick" />
            </Border.InputBindings>
            <TextBlock Foreground="#0078D4"
                   Text="{Binding DisplayText}"
                   VerticalAlignment="Center"
                   FontWeight="Bold"
                   FontSize="11" />
        </Border>
        <DataTemplate.Triggers>
            <Trigger SourceName="OperatorBorder" Property="IsMouseOver" Value="True">
                <Setter TargetName="OperatorBorder" Property="Background" Value="#b8d8f0" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <!--  Search Template Logical Connector Token Template  -->
    <DataTemplate x:Key="TemplateLogicalConnectorTokenTemplate">
        <Border x:Name="TemplateOperatorBorder"
            Background="#cee8fb"
            Cursor="Hand"
            Margin="2,2,2,0"
            Padding="5,1"
            Height="22"
            behaviors:TokenHoverBehavior.IsEnabled="True"
            CornerRadius="6"
            ToolTip="Click to toggle between AND/OR"
            Tag="{Binding FilterId}">
            <Border.InputBindings>
                <MouseBinding Command="{Binding ToggleOperatorCommand, RelativeSource={RelativeSource AncestorType=sdg:FilterPanel}}"
                          CommandParameter="{Binding}"
                          MouseAction="LeftClick" />
            </Border.InputBindings>
            <TextBlock Foreground="#0078D4"
                   Text="{Binding DisplayText}"
                   VerticalAlignment="Center"
                   FontWeight="Bold"
                   FontSize="10" />
        </Border>
        <DataTemplate.Triggers>
            <Trigger SourceName="TemplateOperatorBorder" Property="IsMouseOver" Value="True">
                <Setter TargetName="TemplateOperatorBorder" Property="Background" Value="#b8d8f0" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Remove Action Token Template  -->
    <DataTemplate x:Key="RemoveActionTokenTemplate">
        <Button Background="Transparent"
            BorderBrush="Transparent"
            Cursor="Hand"
            Command="{Binding RemoveTokenFilterCommand, RelativeSource={RelativeSource AncestorType=sdg:FilterPanel}}"
            CommandParameter="{Binding}"
            Margin="-3,-2,-7,0"
            VerticalAlignment="Top"
            Width="20"
            Height="20"
            behaviors:TokenHoverBehavior.IsEnabled="True"
            FontFamily="Segoe Fluent Icons"
            FontSize="10"
            Content="&#xF78A;"
            ToolTip="Remove Filter"
            Tag="{Binding FilterId}">
            <Button.Style>
                <Style BasedOn="{StaticResource CustomTransparentFontIconButtonStyle}" TargetType="Button">
                    <Setter Property="Foreground" Value="#999" />
                    <Setter Property="Opacity" Value="0" />
                    <Style.Triggers>
                        <!--  Show when this token's FilterId matches HoveredFilterId  -->
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource StringEqualityConverter}">
                                    <Binding Path="FilterId" />
                                    <Binding RelativeSource="{RelativeSource AncestorType=sdg:FilterPanel}" Path="HoveredFilterId" />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter Property="Opacity" Value="1" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1" />
                            <Setter Property="Foreground" Value="#666" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#333" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
    </DataTemplate>

    <!--#endregion-->
    
    <!--  Token Template Selector  -->
    <sdg:FilterTokenTemplateSelector x:Key="CustomFilterTokenTemplateSelector"
                                     OpenBracketTemplate="{StaticResource OpenBracketTokenTemplate}"
                                     ColumnNameTemplate="{StaticResource ColumnNameTokenTemplate}"
                                     SearchTypeTemplate="{StaticResource SearchTypeTokenTemplate}"
                                     UnarySearchTypeTemplate="{StaticResource UnarySearchTypeTokenTemplate}"
                                     ValueTemplate="{StaticResource ValueTokenTemplate}"
                                     ValueOperatorTemplate="{StaticResource ValueOperatorTokenTemplate}"
                                     CloseBracketTemplate="{StaticResource ClosingBracketTokenTemplate}"
                                     GroupLogicalConnectorTemplate="{StaticResource GroupLogicalConnectorTokenTemplate}"
                                     TemplateLogicalConnectorTemplate="{StaticResource TemplateLogicalConnectorTokenTemplate}"
                                     RemoveActionTemplate="{StaticResource RemoveActionTokenTemplate}" />

    <!--#region FilterPanel-->

    <!--  Default FilterPanel Style  -->
    <Style x:Key="CustomFilterPanelStyle" TargetType="{x:Type sdg:FilterPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type sdg:FilterPanel}">
                    <Border Background="#F8F9FA"
                            BorderBrush="#E1E5E9"
                            BorderThickness="0,1,0,0"
                            Visibility="{Binding HasActiveFilters, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!--  Filters enabled checkbox  -->
                                <ColumnDefinition Width="*" />
                                <!--  Filter tokens  -->
                                <ColumnDefinition Width="Auto" />
                                <!--  Action buttons  -->
                            </Grid.ColumnDefinitions>

                            <!--  Filters Enabled Checkbox  -->
                            <CheckBox x:Name="PART_FiltersEnabledCheckBox"
                                      Grid.Column="0"
                                      IsChecked="{Binding FiltersEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                      ToolTip="Enable or disable all filters without clearing filter definitions">
                                <CheckBox.Style>
                                    <Style BasedOn="{StaticResource CustomCheckBoxStyle}" TargetType="{x:Type CheckBox}">
                                        <Setter Property="VerticalAlignment" Value="Top" />
                                        <Setter Property="Margin" Value="6,6,0,0" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                <Setter Property="VerticalAlignment" Value="Center" />
                                                <Setter Property="Margin" Value="6,0,0,0" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </CheckBox.Style>
                            </CheckBox>

                            <!--  Filter Tokens Area  -->
                            <Grid Grid.Column="1" VerticalAlignment="Center">
                                <!--  Tokenized Filter Display  -->
                                <ItemsControl x:Name="PART_TokenizedFiltersControl"
                                              ItemsSource="{Binding FilterTokens, RelativeSource={RelativeSource TemplatedParent}}"
                                              ItemTemplateSelector="{StaticResource CustomFilterTokenTemplateSelector}">
                                    <ItemsControl.Style>
                                        <Style TargetType="ItemsControl">
                                            <!--  Default collapsed state: use StackPanel for single line  -->
                                            <Setter Property="ItemsPanel">
                                                <Setter.Value>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal" />
                                                    </ItemsPanelTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <!--  Expanded state: use WrapPanel for multiple lines  -->
                                                <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="ItemsPanel">
                                                        <Setter.Value>
                                                            <ItemsPanelTemplate>
                                                                <WrapPanel Orientation="Horizontal" MaxHeight="200" />
                                                            </ItemsPanelTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ItemsControl.Style>
                                </ItemsControl>
                            </Grid>

                            <Border x:Name="PART_FadeOverlay"
                                    Grid.Column="1"
                                    IsHitTestVisible="False"
                                    Margin="0,0,-1,0"
                                    HorizontalAlignment="Right"
                                    Width="60">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <GradientStop Color="#00FFFFFF" Offset="0" />
                                        <GradientStop Color="#FFF8F9FA" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border.Style>
                                    <Style TargetType="Border">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding HasOverflow, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                                    <Condition Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Visibility" Value="Visible" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Border.Style>
                            </Border>
                            <!--  Action Buttons  -->
                            <StackPanel Grid.Column="2" Orientation="Horizontal">
                                <StackPanel.Style>
                                    <Style TargetType="{x:Type StackPanel}">
                                        <Setter Property="VerticalAlignment" Value="Bottom" />
                                        <Setter Property="Margin" Value="0,0,4,3" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                <Setter Property="VerticalAlignment" Value="Center" />
                                                <Setter Property="Margin" Value="0,0,4,0" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </StackPanel.Style>

                                <!--  Expand/Collapse Toggle Button  -->
                                <Button x:Name="PART_ExpandButton"
                                        Command="{Binding ToggleExpandCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        Width="24"
                                        Height="24"
                                        FontWeight="ExtraBlack"
                                        FontSize="14">
                                    <Button.Style>
                                        <Style BasedOn="{StaticResource CustomTransparentFontIconButtonStyle}" TargetType="{x:Type Button}">
                                            <Setter Property="Content" Value="&#xE712;" />
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="ToolTip" Value="Expand filter panel" />
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Style.Triggers>
                                                <!--  Hide expand button when there's no overflow  -->
                                                <DataTrigger Binding="{Binding HasOverflow, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                                    <Setter Property="Content" Value="&#xE896;" />
                                                    <Setter Property="ToolTip" Value="Collapse filter panel" />
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#eee" />
                                                    <Setter Property="Foreground" Value="#1c1c1c" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Background" Value="#ddd" />
                                                    <Setter Property="Foreground" Value="#000000" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>

                                <Button x:Name="PART_ClearAllButton"
                                        Command="{Binding ClearAllFiltersCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        Width="24"
                                        Height="24"
                                        Content="&#xE711;"
                                        FontSize="14"
                                        ToolTip="Clear all filters">
                                    <Button.Style>
                                        <Style BasedOn="{StaticResource CustomTransparentFontIconButtonStyle}" TargetType="{x:Type Button}">
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#eee" />
                                                    <Setter Property="Foreground" Value="#CC0000" />
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="True">
                                                    <Setter Property="Background" Value="#ddd" />
                                                    <Setter Property="Foreground" Value="#990000" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

</ResourceDictionary>